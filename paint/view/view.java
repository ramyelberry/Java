/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paint.view;

import java.awt.Color;
import static java.awt.Color.black;
import static java.awt.Color.blue;
import static java.awt.Color.green;
import static java.awt.Color.red;
import static java.awt.Color.yellow;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import paint.controller.Control;
import paint.model.Circle;
import paint.model.Elipse;
import paint.model.LineSegment;
import paint.model.Rect;
import paint.model.Shape;
import paint.model.Square;
import paint.model.Triangle;

/**
 *
 * @author Ramy
 */
public class view extends javax.swing.JFrame implements MouseListener,MouseMotionListener {
private Shape s;
private Control c ;
private Color color=black;
Point clickPoint;
int x,y;
int x1;
int y1;
int count=0;
    Shape v; /**
     * Creates new form view
     */
    public view() {
        initComponents();
      c=new Control();
          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Can = new javax.swing.JPanel();
        Color = new javax.swing.JComboBox<>();
        Type = new javax.swing.JComboBox<>();
        Fill = new javax.swing.JCheckBox();
        Undo = new javax.swing.JButton();
        Redo = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Code = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Can.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout CanLayout = new javax.swing.GroupLayout(Can);
        Can.setLayout(CanLayout);
        CanLayout.setHorizontalGroup(
            CanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        CanLayout.setVerticalGroup(
            CanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );

        Color.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Green ", "Yellow", "Black ", "Blue", " " }));
        Color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorActionPerformed(evt);
            }
        });

        Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Square", "Rectangle", "Circle ", "Elipse ", "Triangle", "Line Segment" }));
        Type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeActionPerformed(evt);
            }
        });

        Fill.setText("Filled");
        Fill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FillActionPerformed(evt);
            }
        });

        Undo.setText("Undo");
        Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoActionPerformed(evt);
            }
        });

        Redo.setText("Redo");
        Redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedoActionPerformed(evt);
            }
        });

        Save.setText("Save");

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Code.setText("Copy");
        Code.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Can, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Fill)))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Undo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Redo))
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Code)
                    .addComponent(Save))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Undo)
                    .addComponent(Redo)
                    .addComponent(Save)
                    .addComponent(Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Fill))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Delete)
                    .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Code))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Can, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeActionPerformed
   
      if (Type.getSelectedItem().toString().equalsIgnoreCase("Square"))
      {
          s=new Square();
      }
      else if (Type.getSelectedItem().toString().equalsIgnoreCase("Rectangle"))
      {
          s=new Rect();
      }
      else if (Type.getSelectedItem().equals("Circle "))
      {
         s=new Circle();
          System.out.println(Type.getSelectedItem());
      }
      
      else if (Type.getSelectedItem().toString().equalsIgnoreCase("Triangle"))
      {
          s=new Triangle();
      }
         else if (Type.getSelectedItem().equals("Elipse "))
      {
         s=new Elipse();
          System.out.println(Type.getSelectedItem());
      }
        else if(Type.getSelectedItem().toString().equalsIgnoreCase("Line Segment")) 
            s=new LineSegment();

        
         Can.addMouseListener(this); 
   Can.addMouseMotionListener(this);
   
       
    }//GEN-LAST:event_TypeActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
c.removeShape(s);
  
    repaint();
   
    }//GEN-LAST:event_DeleteActionPerformed

    private void ColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorActionPerformed
       System.out.println("zzzz");
       if (Color.getSelectedItem().toString().equalsIgnoreCase("red"))
      {System.out.println("zzzz");
          color=red;
      }
       else  if (Color.getSelectedItem().toString().equalsIgnoreCase("Yellow"))
      {
         color=yellow;
      }
      else if (Color.getSelectedItem().toString().equalsIgnoreCase("Green"))
      {
          color=green;
      }
      
      else if (Color.getSelectedItem().toString().equalsIgnoreCase("Black"))
      {
          color=black;
      }
      else  if (Color.getSelectedItem().toString().equalsIgnoreCase("Blue"))
      {
          color=blue;
      } 
         s.setColor(color);
    }//GEN-LAST:event_ColorActionPerformed

    private void RedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedoActionPerformed
 
    }//GEN-LAST:event_RedoActionPerformed

    private void UndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoActionPerformed
       
    }//GEN-LAST:event_UndoActionPerformed

    private void FillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FillActionPerformed
      if (Fill.isSelected())
      {
          s.setFillColor(color);
      }
    }//GEN-LAST:event_FillActionPerformed

    private void CodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CodeActionPerformed
count=1;        // TODO add your handling code here:
    }//GEN-LAST:event_CodeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new view().setVisible(true);
          
            }
        });
          }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Can;
    private javax.swing.JButton Code;
    private javax.swing.JComboBox<String> Color;
    private javax.swing.JButton Delete;
    private javax.swing.JCheckBox Fill;
    private javax.swing.JButton Redo;
    private javax.swing.JButton Save;
    private javax.swing.JComboBox<String> Type;
    private javax.swing.JButton Undo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
   try{ Shape v[]=c.getShapes();
   
        System.out.println(v[v.length-1]+"    "+v.length);
   if(count==1)
   {
       s=(Shape)v[v.length-1];
       Shape vr=(Shape)s.clone();
       c.addShape(vr);
       repaint();
       c.refresh(Can.getGraphics());
   }}catch(Exception e)
        {
            
        }
 
     
        
 
    }

    @Override
    public void mousePressed(MouseEvent me) {
        clickPoint = new Point(me.getPoint());
  
    
    
    }
    
    
    

    @Override
    public void mouseReleased(MouseEvent me) {

      s.draw(Can.getGraphics());
    c.addShape(s);
    c.refresh(Can.getGraphics());
 
 if (Type.getSelectedItem().toString().equalsIgnoreCase("Square"))
      {
          s=new Square();
      }
      else if (Type.getSelectedItem().toString().equalsIgnoreCase("Rectangle"))
      {
          s=new Rect();
      }
      else if (Type.getSelectedItem().equals("Circle "))
      {
         s=new Circle();
          System.out.println(Type.getSelectedItem());
      }
      
      else if (Type.getSelectedItem().toString().equalsIgnoreCase("Triangle"))
      {
          s=new Triangle();
      }
         else if (Type.getSelectedItem().equals("Elipse "))
      {
         s=new Elipse();
          System.out.println(Type.getSelectedItem());
      }
        else if(Type.getSelectedItem().toString().equalsIgnoreCase("Line Segment")) 
            s=new LineSegment();

 
        }

    @Override
    public void mouseEntered(MouseEvent me) {
    c.refresh(Can.getGraphics());     //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
    c.refresh(Can.getGraphics());  //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseDragged(MouseEvent me) {
 try{
     if (Type.getSelectedItem().equals("Circle ")){
    
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       Point p=new Point();
       p.x=x;
       p.y=y;
      
      
      s.setPosition(p);
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("radius",z );
    
     s.setProperties(map);
     s.draw(Can.getGraphics());  
     repaint();
     c.refresh(Can.getGraphics());}
 else if (Type.getSelectedItem().equals("Square"))
 {
      System.out.println("888");
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       Point p=new Point();
       p.x=x;
       p.y=y;
      
      
      s.setPosition(p);
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("length",z );
    
     s.setProperties(map);
     s.draw(Can.getGraphics());  
     repaint();
 c.refresh(Can.getGraphics());}
 
else if (Type.getSelectedItem().equals("Elipse "))
 {
      System.out.println("555");
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       double z1=(double)y1;
       Point p=new Point();
       p.x=x;
       p.y=y;
      
      
      s.setPosition(p);
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("radius1",z);
     s.setProperties(map);
     map.put("radius2",z1);
      s.setProperties(map);
     s.draw(Can.getGraphics());  
     repaint();
 c.refresh(Can.getGraphics());}
 else if (Type.getSelectedItem().equals("Rectangle"))
 {
      System.out.println("999");
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = minX;
        y = minY;
       x1=maxX - minX;
       y1= maxY - minY; 
       double z=(double)x1;
       double z1=(double)y1;
       Point p=new Point();
       p.x=x;
       p.y=y;  
      s.setPosition(p);
     Map<String,Double> map = new HashMap<String,Double>();
      map.put("length",z );
     s.setProperties(map);
     map.put("width", z1);
      s.setProperties(map);
     s.draw(Can.getGraphics());  
     repaint();
 c.refresh(Can.getGraphics());}
if (Type.getSelectedItem().equals("Line Segment")){
     System.out.println("7171");
    int minX = Math.min(me.getX(), clickPoint.x);
    int minY = Math.min(me.getY(), clickPoint.y);
    int maxX = Math.max(me.getX(), clickPoint.x);
    int maxY = Math.max(me.getY(), clickPoint.y);

        x = clickPoint.x;
        y = clickPoint.y;
       x1=me.getX();
       y1=me.getY(); 
       
       Point p=new Point();
       p.x=x;
       p.y=y;
      
      
      s.setPosition(p);
   Point p1=new Point();
    p1.x=x1;
       p1.y=y1;
     ((LineSegment)s).setPosition1(p1);
     s.draw(Can.getGraphics());  
     repaint();
     c.refresh(Can.getGraphics());} }catch(Exception e){   
    }    }

    @Override
    public void mouseMoved(MouseEvent me) {
         //To change body of generated methods, choose Tools | Templates.
    }
   
}
